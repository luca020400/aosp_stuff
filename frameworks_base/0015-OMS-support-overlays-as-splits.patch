From db75a0b9f48588bcdff300424a15c36710166d3c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Kongstad?= <marten.kongstad@sony.com>
Date: Fri, 2 Jun 2017 13:24:50 +0200
Subject: [PATCH 15/15] OMS: support overlays as splits

Teach the overlay manager to look for overlays in both the base APK and
the split APKs of a package.

To the overlay manager, each APK is independent of the other APKs in a
package and can be enabled, reordered, etc on its own.

The overlay manager refers to base APKs by <package-name> and to split
APKs by <package-name>:<split-name>.

To play around with overlays as splits, use the tests overlays:

  $ mmm -j24 frameworks/base/tests/Overlays/{base,red,green,blue,system} && \
    adb install-multiple $OUT/data/app/Overlays{Base,Red,Green,Blue,System}/*.apk

Also, remove the now unused method PackageManagerInternal#getOverlayPackages.

Test: manual (see above)
Test: bit FrameworksServicesTests:com.android.server.om.RuntimeResourceOverlayTests\#testSplitOverlay
Change-Id: I4ee53a601bc2c53dcab6b7ce81751a97e82567e3
---
 cmds/pm/src/com/android/commands/pm/Pm.java        |   2 +-
 core/java/android/content/pm/PackageInfo.java      |  26 +++
 .../android/content/pm/PackageManagerInternal.java |   8 -
 core/java/android/content/pm/PackageParser.java    |  37 +++-
 .../android/server/om/OverlayManagerService.java   | 229 +++++++++++++--------
 .../com/android/server/om/PackageInfoLite.java     |   4 +
 .../android/server/pm/PackageInstallerSession.java |   2 +-
 .../android/server/pm/PackageManagerService.java   |  16 --
 .../server/pm/PackageManagerShellCommand.java      |   2 +-
 .../src/com/android/server/om/OverlayUtils.java    |   6 +
 .../src/com/android/server/om/PackageUtils.java    |  21 +-
 .../server/om/RuntimeResourceOverlayTests.java     |  54 +++++
 .../test-apks/split_integer/AndroidManifest.xml    |   8 +
 .../servicestests/test-apks/split_integer/build    |  24 +++
 .../test-apks/split_integer/res/values/values.xml  |   4 +
 .../test-apks/split_string/AndroidManifest.xml     |   8 +
 .../servicestests/test-apks/split_string/build     |  24 +++
 .../test-apks/split_string/res/values/values.xml   |   4 +
 .../servicestests/test-apps/split_base/Android.mk  |  15 ++
 .../test-apps/split_base/AndroidManifest.xml       |   8 +
 .../src/com/android/rrotests/split/Dummy.java      |   2 +
 tests/Overlays/base/Android.mk                     |  16 ++
 tests/Overlays/base/AndroidManifest.xml            |  10 +
 tests/Overlays/base/res/values/strings.xml         |   3 +
 tests/Overlays/base/res/values/styles.xml          |   4 +
 .../base/src/com/android/test/overlay/A.java       |   2 +
 tests/Overlays/blue/Android.mk                     |   6 +-
 tests/Overlays/blue/AndroidManifest.xml            |   3 +-
 tests/Overlays/green/Android.mk                    |   6 +-
 tests/Overlays/green/AndroidManifest.xml           |   3 +-
 tests/Overlays/red/Android.mk                      |   6 +-
 tests/Overlays/red/AndroidManifest.xml             |   3 +-
 tests/Overlays/system/Android.mk                   |   4 +-
 tests/Overlays/system/AndroidManifest.xml          |   3 +-
 .../android/test/overlay/target/MainActivity.java  |   8 +-
 35 files changed, 437 insertions(+), 144 deletions(-)
 create mode 100644 services/tests/servicestests/test-apks/split_integer/AndroidManifest.xml
 create mode 100644 services/tests/servicestests/test-apks/split_integer/build
 create mode 100644 services/tests/servicestests/test-apks/split_integer/res/values/values.xml
 create mode 100644 services/tests/servicestests/test-apks/split_string/AndroidManifest.xml
 create mode 100644 services/tests/servicestests/test-apks/split_string/build
 create mode 100644 services/tests/servicestests/test-apks/split_string/res/values/values.xml
 create mode 100644 services/tests/servicestests/test-apps/split_base/Android.mk
 create mode 100644 services/tests/servicestests/test-apps/split_base/AndroidManifest.xml
 create mode 100644 services/tests/servicestests/test-apps/split_base/src/com/android/rrotests/split/Dummy.java
 create mode 100644 tests/Overlays/base/Android.mk
 create mode 100644 tests/Overlays/base/AndroidManifest.xml
 create mode 100644 tests/Overlays/base/res/values/strings.xml
 create mode 100644 tests/Overlays/base/res/values/styles.xml
 create mode 100644 tests/Overlays/base/src/com/android/test/overlay/A.java

diff --git a/cmds/pm/src/com/android/commands/pm/Pm.java b/cmds/pm/src/com/android/commands/pm/Pm.java
index ad989dee7b5..f0189c240a8 100644
--- a/cmds/pm/src/com/android/commands/pm/Pm.java
+++ b/cmds/pm/src/com/android/commands/pm/Pm.java
@@ -414,7 +414,7 @@ public final class Pm {
                 try {
                     ApkLite baseApk = PackageParser.parseApkLite(file, 0);
                     PackageLite pkgLite = new PackageLite(null, baseApk, null, null, null, null,
-                            null, null);
+                            null, null, null);
                     params.sessionParams.setSize(
                             PackageHelper.calculateInstalledSize(pkgLite, false,
                             params.sessionParams.abiOverride));
diff --git a/core/java/android/content/pm/PackageInfo.java b/core/java/android/content/pm/PackageInfo.java
index ba488f6a051..0f0bc0eccd2 100644
--- a/core/java/android/content/pm/PackageInfo.java
+++ b/core/java/android/content/pm/PackageInfo.java
@@ -65,6 +65,28 @@ public class PackageInfo implements Parcelable {
      */
     public int[] splitRevisionCodes;
 
+    /**
+     * The path to any split APKs for this package. Indexes are a 1:1 mapping
+     * against {@link #splitNames}.
+     *
+     * For splits that are not overlays, the corresponding value is null.
+     *
+     * @hide
+     */
+    public String[] splitCodePaths;
+
+    /**
+     * The name of the target package of any split which is an overlay, as
+     * specified by the %lt;overlay&gt; tag's
+     * {@link android.R.styleable#AndroidManifest_targetPackage targetPackage}
+     * attribute. Indexes are a 1:1 mapping against {@link #splitNames}.
+     *
+     * For splits that are not overlays, the corresponding value is null.
+     *
+     * @hide
+     */
+    public String[] splitOverlayTargetPackageNames;
+
     /**
      * The shared user ID name of this package, as specified by the &lt;manifest&gt;
      * tag's {@link android.R.styleable#AndroidManifest_sharedUserId sharedUserId}
@@ -312,6 +334,8 @@ public class PackageInfo implements Parcelable {
         dest.writeString(versionName);
         dest.writeInt(baseRevisionCode);
         dest.writeIntArray(splitRevisionCodes);
+        dest.writeStringArray(splitCodePaths);
+        dest.writeStringArray(splitOverlayTargetPackageNames);
         dest.writeString(sharedUserId);
         dest.writeInt(sharedUserLabel);
         if (applicationInfo != null) {
@@ -366,6 +390,8 @@ public class PackageInfo implements Parcelable {
         versionName = source.readString();
         baseRevisionCode = source.readInt();
         splitRevisionCodes = source.createIntArray();
+        splitCodePaths = source.createStringArray();
+        splitOverlayTargetPackageNames = source.createStringArray();
         sharedUserId = source.readString();
         sharedUserLabel = source.readInt();
         int hasApp = source.readInt();
diff --git a/core/java/android/content/pm/PackageManagerInternal.java b/core/java/android/content/pm/PackageManagerInternal.java
index 4c981cdb251..f6a7067a912 100644
--- a/core/java/android/content/pm/PackageManagerInternal.java
+++ b/core/java/android/content/pm/PackageManagerInternal.java
@@ -310,14 +310,6 @@ public abstract class PackageManagerInternal {
      */
     public abstract boolean isPackagePersistent(String packageName);
 
-    /**
-     * Get all overlay packages for a user.
-     * @param userId The user for which to get the overlays.
-     * @return A list of overlay packages. An empty list is returned if the
-     *         user has no installed overlay packages.
-     */
-    public abstract List<PackageInfo> getOverlayPackages(int userId);
-
     /**
      * Get the names of all target packages for a user.
      * @param userId The user for which to get the package names.
diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index 298ac9c6fad..6c71696fd6d 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -422,6 +422,9 @@ public class PackageParser {
         /** Revision codes of any split APKs, ordered by parsed splitName */
         public final int[] splitRevisionCodes;
 
+        /** Overlay target package names, ordered by parsed splitName */
+        public final String[] splitOverlayTargetPackageNames;
+
         public final boolean coreApp;
         public final boolean debuggable;
         public final boolean multiArch;
@@ -431,7 +434,8 @@ public class PackageParser {
 
         public PackageLite(String codePath, ApkLite baseApk, String[] splitNames,
                 boolean[] isFeatureSplits, String[] usesSplitNames, String[] configForSplit,
-                String[] splitCodePaths, int[] splitRevisionCodes) {
+                String[] splitCodePaths, int[] splitRevisionCodes,
+                String[] splitOverlayTargetPackageNames) {
             this.packageName = baseApk.packageName;
             this.versionCode = baseApk.versionCode;
             this.installLocation = baseApk.installLocation;
@@ -445,6 +449,7 @@ public class PackageParser {
             this.splitCodePaths = splitCodePaths;
             this.baseRevisionCode = baseApk.revisionCode;
             this.splitRevisionCodes = splitRevisionCodes;
+            this.splitOverlayTargetPackageNames = splitOverlayTargetPackageNames;
             this.coreApp = baseApk.coreApp;
             this.debuggable = baseApk.debuggable;
             this.multiArch = baseApk.multiArch;
@@ -485,13 +490,14 @@ public class PackageParser {
         public final boolean use32bitAbi;
         public final boolean extractNativeLibs;
         public final boolean isolatedSplits;
+        public final String overlayTargetPackageName;
 
         public ApkLite(String codePath, String packageName, String splitName, boolean isFeatureSplit,
                 String configForSplit, String usesSplitName, int versionCode, int revisionCode,
                 int installLocation, List<VerifierInfo> verifiers, Signature[] signatures,
                 Certificate[][] certificates, boolean coreApp, boolean debuggable,
                 boolean multiArch, boolean use32bitAbi, boolean extractNativeLibs,
-                boolean isolatedSplits) {
+                boolean isolatedSplits, String overlayTargetPackageName) {
             this.codePath = codePath;
             this.packageName = packageName;
             this.splitName = splitName;
@@ -510,6 +516,7 @@ public class PackageParser {
             this.use32bitAbi = use32bitAbi;
             this.extractNativeLibs = extractNativeLibs;
             this.isolatedSplits = isolatedSplits;
+            this.overlayTargetPackageName = overlayTargetPackageName;
         }
     }
 
@@ -663,6 +670,8 @@ public class PackageParser {
         pi.versionCode = p.mVersionCode;
         pi.baseRevisionCode = p.baseRevisionCode;
         pi.splitRevisionCodes = p.splitRevisionCodes;
+        pi.splitCodePaths = p.splitCodePaths;
+        pi.splitOverlayTargetPackageNames = p.splitOverlayTargetPackageNames;
         pi.versionName = p.mVersionName;
         pi.sharedUserId = p.mSharedUserId;
         pi.sharedUserLabel = p.mSharedUserLabel;
@@ -877,7 +886,7 @@ public class PackageParser {
         final ApkLite baseApk = parseApkLite(packageFile, flags);
         final String packagePath = packageFile.getAbsolutePath();
         Trace.traceEnd(TRACE_TAG_PACKAGE_MANAGER);
-        return new PackageLite(packagePath, baseApk, null, null, null, null, null, null);
+        return new PackageLite(packagePath, baseApk, null, null, null, null, null, null, null);
     }
 
     static PackageLite parseClusterPackageLite(File packageDir, int flags)
@@ -941,6 +950,7 @@ public class PackageParser {
         String[] splitCodePaths = null;
         int[] splitRevisionCodes = null;
         String[] splitClassLoaderNames = null;
+        String[] splitOverlayTargetPackageNames = null;
         if (size > 0) {
             splitNames = new String[size];
             isFeatureSplits = new boolean[size];
@@ -948,6 +958,7 @@ public class PackageParser {
             configForSplits = new String[size];
             splitCodePaths = new String[size];
             splitRevisionCodes = new int[size];
+            splitOverlayTargetPackageNames = new String[size];
 
             splitNames = apks.keySet().toArray(splitNames);
             Arrays.sort(splitNames, sSplitNameComparator);
@@ -959,12 +970,14 @@ public class PackageParser {
                 configForSplits[i] = apk.configForSplit;
                 splitCodePaths[i] = apk.codePath;
                 splitRevisionCodes[i] = apk.revisionCode;
+                splitOverlayTargetPackageNames[i] = apk.overlayTargetPackageName;
             }
         }
 
         final String codePath = packageDir.getAbsolutePath();
         return new PackageLite(codePath, baseApk, splitNames, isFeatureSplits, usesSplitNames,
-                configForSplits, splitCodePaths, splitRevisionCodes);
+                configForSplits, splitCodePaths, splitRevisionCodes,
+                splitOverlayTargetPackageNames);
     }
 
     /**
@@ -1229,6 +1242,7 @@ public class PackageParser {
                 pkg.splitNames = lite.splitNames;
                 pkg.splitCodePaths = lite.splitCodePaths;
                 pkg.splitRevisionCodes = lite.splitRevisionCodes;
+                pkg.splitOverlayTargetPackageNames = lite.splitOverlayTargetPackageNames;
                 pkg.splitFlags = new int[num];
                 pkg.splitPrivateFlags = new int[num];
                 pkg.applicationInfo.splitNames = pkg.splitNames;
@@ -1847,6 +1861,7 @@ public class PackageParser {
         boolean isFeatureSplit = false;
         String configForSplit = null;
         String usesSplitName = null;
+        String overlayTargetPackageName = null;
 
         for (int i = 0; i < attrs.getAttributeCount(); i++) {
             final String attr = attrs.getAttributeName(i);
@@ -1916,13 +1931,20 @@ public class PackageParser {
                             PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED,
                             "<uses-split> tag requires 'android:name' attribute");
                 }
+            } else if (TAG_OVERLAY.equals(parser.getName())) {
+                for (int i = 0; i < attrs.getAttributeCount(); ++i) {
+                    final String attr = attrs.getAttributeName(i);
+                    if ("targetPackage".equals(attr)) {
+                        overlayTargetPackageName = attrs.getAttributeValue(i);
+                    }
+                }
             }
         }
 
         return new ApkLite(codePath, packageSplit.first, packageSplit.second, isFeatureSplit,
                 configForSplit, usesSplitName, versionCode, revisionCode, installLocation,
                 verifiers, signatures, certificates, coreApp, debuggable, multiArch, use32bitAbi,
-                extractNativeLibs, isolatedSplits);
+                extractNativeLibs, isolatedSplits, overlayTargetPackageName);
     }
 
     /**
@@ -5842,6 +5864,9 @@ public class PackageParser {
         /** Revision codes of any split APKs, ordered by parsed splitName */
         public int[] splitRevisionCodes;
 
+        /** Names of overlay target packages, orderd by parsed splitName */
+        public String[] splitOverlayTargetPackageNames;
+
         /** Flags of any split APKs; ordered by parsed splitName */
         public int[] splitFlags;
 
@@ -6316,6 +6341,7 @@ public class PackageParser {
             splitCodePaths = dest.readStringArray();
             baseRevisionCode = dest.readInt();
             splitRevisionCodes = dest.createIntArray();
+            splitOverlayTargetPackageNames = dest.createStringArray();
             splitFlags = dest.createIntArray();
             splitPrivateFlags = dest.createIntArray();
             baseHardwareAccelerated = (dest.readInt() == 1);
@@ -6490,6 +6516,7 @@ public class PackageParser {
             dest.writeStringArray(splitCodePaths);
             dest.writeInt(baseRevisionCode);
             dest.writeIntArray(splitRevisionCodes);
+            dest.writeStringArray(splitOverlayTargetPackageNames);
             dest.writeIntArray(splitFlags);
             dest.writeIntArray(splitPrivateFlags);
             dest.writeInt(baseHardwareAccelerated ? 1 : 0);
diff --git a/services/core/java/com/android/server/om/OverlayManagerService.java b/services/core/java/com/android/server/om/OverlayManagerService.java
index 4e6f014f86b..7ecf3625032 100644
--- a/services/core/java/com/android/server/om/OverlayManagerService.java
+++ b/services/core/java/com/android/server/om/OverlayManagerService.java
@@ -37,6 +37,7 @@ import android.content.om.OverlayInfo;
 import android.content.pm.IPackageManager;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManagerInternal;
+import android.content.pm.ParceledListSlice;
 import android.content.pm.UserInfo;
 import android.net.Uri;
 import android.os.Binder;
@@ -81,6 +82,8 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Future;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.BiConsumer;
+import java.util.stream.Collectors;
 
 /**
  * Service to manage asset overlays.
@@ -341,19 +344,46 @@ public final class OverlayManagerService extends SystemService {
             switch (intent.getAction()) {
                 case ACTION_PACKAGE_ADDED:
                     if (replacing) {
-                        onPackageUpgraded(packageName, userIds);
+                        // a package just finished upgrading
+                        handlePackageEvent(packageName, userIds,
+                                mImpl::onTargetPackageAdded,
+                                mImpl::onOverlayPackageAdded,
+                                mImpl::onTargetPackageUpgraded,
+                                mImpl::onOverlayPackageUpgraded,
+                                mImpl::onTargetPackageRemoved,
+                                mImpl::onOverlayPackageRemoved);
                     } else {
-                        onPackageAdded(packageName, userIds);
+                        // a package was just installed
+                        handlePackageEvent(packageName, userIds,
+                                mImpl::onTargetPackageAdded,
+                                mImpl::onOverlayPackageAdded,
+                                mImpl::onTargetPackageChanged,
+                                mImpl::onOverlayPackageChanged,
+                                mImpl::onTargetPackageRemoved,
+                                mImpl::onOverlayPackageRemoved);
                     }
                     break;
                 case ACTION_PACKAGE_CHANGED:
-                    onPackageChanged(packageName, userIds);
+                        // a component in a package was just changed
+                    handlePackageEvent(packageName, userIds,
+                            mImpl::onTargetPackageAdded,
+                            mImpl::onOverlayPackageAdded,
+                            mImpl::onTargetPackageChanged,
+                            mImpl::onOverlayPackageChanged,
+                            mImpl::onTargetPackageRemoved,
+                            mImpl::onOverlayPackageRemoved);
                     break;
                 case ACTION_PACKAGE_REMOVED:
                     if (replacing) {
-                        onPackageUpgrading(packageName, userIds);
+                        // a package just started upgrading
+                        handlePackageEvent(packageName, userIds,
+                                mImpl::onTargetPackageUpgrading,
+                                mImpl::onOverlayPackageUpgrading);
                     } else {
-                        onPackageRemoved(packageName, userIds);
+                        // a package was just uninstalled
+                        handlePackageEvent(packageName, userIds,
+                                mImpl::onTargetPackageRemoved,
+                                mImpl::onOverlayPackageRemoved);
                     }
                     break;
                 default:
@@ -362,91 +392,75 @@ public final class OverlayManagerService extends SystemService {
             }
         }
 
-        private void onPackageAdded(@NonNull final String packageName,
-                @NonNull final int[] userIds) {
-            for (final int userId : userIds) {
-                synchronized (mLock) {
-                    final PackageInfo pi = mPackageManager.getPackageInfo(packageName, userId);
-                    if (pi == null) {
-                        continue;
-                    }
-                    final PackageInfoLite pil = mPackageManager.parsePackageInfo(pi);
-                    mPackageManager.cachePackageInfoLite(packageName, userId, pil);
-                    if (!isOverlayPackage(pil)) {
-                        mImpl.onTargetPackageAdded(packageName, userId);
-                    } else {
-                        mImpl.onOverlayPackageAdded(packageName, userId);
-                    }
-                }
-            }
-        }
-
-        private void onPackageChanged(@NonNull final String packageName,
-                @NonNull final int[] userIds) {
-            for (int userId : userIds) {
-                synchronized (mLock) {
-                    final PackageInfo pi = mPackageManager.getPackageInfo(packageName, userId);
-                    if (pi == null) {
-                        continue;
-                    }
-                    final PackageInfoLite pil = mPackageManager.parsePackageInfo(pi);
-                    mPackageManager.cachePackageInfoLite(packageName, userId, pil);
-                    if (!isOverlayPackage(pil)) {
-                        mImpl.onTargetPackageChanged(packageName, userId);
-                    } else {
-                        mImpl.onOverlayPackageChanged(packageName, userId);
-                    }
-                }
-            }
-        }
-
-        private void onPackageUpgrading(@NonNull final String packageName,
-                @NonNull final int[] userIds) {
-            for (int userId : userIds) {
-                synchronized (mLock) {
-                    mPackageManager.forgetPackageInfoLite(packageName, userId);
-                    final OverlayInfo oi = mImpl.getOverlayInfo(packageName, userId);
-                    if (oi == null) {
-                        mImpl.onTargetPackageUpgrading(packageName, userId);
-                    } else {
-                        mImpl.onOverlayPackageUpgrading(packageName, userId);
-                    }
-                }
-            }
+        private void handlePackageEvent(@NonNull final String packageName,
+                @NonNull final int[] userIds,
+                @NonNull BiConsumer<String, Integer> removedTargetPackageMethod,
+                @NonNull BiConsumer<String, Integer> removedOverlayPackageMethod) {
+            handlePackageEvent(packageName, userIds, null, null, null, null,
+                    removedTargetPackageMethod, removedOverlayPackageMethod);
         }
 
-        private void onPackageUpgraded(@NonNull final String packageName,
-                @NonNull final int[] userIds) {
+        private void handlePackageEvent(@NonNull final String packageName,
+                @NonNull final int[] userIds,
+                @Nullable BiConsumer<String, Integer> addedTargetPackageMethod,
+                @Nullable BiConsumer<String, Integer> addedOverlayPackageMethod,
+                @Nullable BiConsumer<String, Integer> changedTargetPackageMethod,
+                @Nullable BiConsumer<String, Integer> changedOverlayPackageMethod,
+                @NonNull BiConsumer<String, Integer> removedTargetPackageMethod,
+                @NonNull BiConsumer<String, Integer> removedOverlayPackageMethod) {
             for (int userId : userIds) {
                 synchronized (mLock) {
-                    final PackageInfo pi = mPackageManager.getPackageInfo(packageName, userId);
-                    if (pi == null) {
-                        continue;
+                    final List<String> known = getKnownPackageNames(packageName, userId);
+
+                    if (addedTargetPackageMethod != null) {
+                        final PackageInfo pi = mPackageManager.getPackageInfo(packageName, userId);
+                        final List<PackageInfoLite> existing = pi != null ?
+                            mPackageManager.parsePackageInfo(pi) : Collections.emptyList();
+                        for (int i = 0; i < existing.size(); i++) {
+                            final PackageInfoLite pil = existing.get(i);
+                            mPackageManager.cachePackageInfoLite(pil.packageName, userId, pil);
+                            if (known.contains(pil.packageName)) {
+                                // changed*PackageMethod
+                                known.remove(pil.packageName);
+                                if (!isOverlayPackage(pil)) {
+                                    changedTargetPackageMethod.accept(pil.packageName, userId);
+                                } else {
+                                    changedOverlayPackageMethod.accept(pil.packageName, userId);
+                                }
+                            } else {
+                                // added*PackageMethod
+                                if (!isOverlayPackage(pil)) {
+                                    addedTargetPackageMethod.accept(pil.packageName, userId);
+                                } else {
+                                    addedOverlayPackageMethod.accept(pil.packageName, userId);
+                                }
+                            }
+                        }
                     }
-                    final PackageInfoLite pil = mPackageManager.parsePackageInfo(pi);
-                    mPackageManager.cachePackageInfoLite(packageName, userId, pil);
-                    if (!isOverlayPackage(pil)) {
-                        mImpl.onTargetPackageUpgraded(packageName, userId);
-                    } else {
-                        mImpl.onOverlayPackageUpgraded(packageName, userId);
+                    for (int i = 0; i < known.size(); i++) {
+                        final String name = known.get(i);
+                        mPackageManager.forgetPackageInfoLite(name, userId);
+                        final OverlayInfo oi = mImpl.getOverlayInfo(name, userId);
+                        // removed*PackageMethod
+                        if (oi == null) {
+                            removedTargetPackageMethod.accept(name, userId);
+                        } else {
+                            removedOverlayPackageMethod.accept(name, userId);
+                        }
                     }
                 }
             }
         }
 
-        private void onPackageRemoved(@NonNull final String packageName,
-                @NonNull final int[] userIds) {
-            for (int userId : userIds) {
-                synchronized (mLock) {
-                    mPackageManager.forgetPackageInfoLite(packageName, userId);
-                    final OverlayInfo oi = mImpl.getOverlayInfo(packageName, userId);
-                    if (oi == null) {
-                        mImpl.onTargetPackageRemoved(packageName, userId);
-                    } else {
-                        mImpl.onOverlayPackageRemoved(packageName, userId);
-                    }
-                }
-            }
+        private List<String> getKnownPackageNames(@NonNull final String packageName,
+                final int userId) {
+            final String prefix = packageName + ":";
+            return mSettings.getOverlaysForUser(userId).values().stream()
+                .flatMap(items -> items.stream())
+                .filter(item -> item.packageName.equals(packageName) ||
+                        item.packageName.startsWith(prefix))
+                .map(item -> item.packageName)
+                .collect(Collectors.toList());
         }
     }
 
@@ -671,7 +685,7 @@ public final class OverlayManagerService extends SystemService {
         }
     };
 
-    private boolean isOverlayPackage(@NonNull final PackageInfoLite pil) {
+    private static boolean isOverlayPackage(@NonNull final PackageInfoLite pil) {
         return pil != null && pil.overlayTarget != null;
     }
 
@@ -833,9 +847,24 @@ public final class OverlayManagerService extends SystemService {
             mPackageManagerInternal = LocalServices.getService(PackageManagerInternal.class);
         }
 
-        public PackageInfoLite parsePackageInfo(@NonNull final PackageInfo pi) {
-            return new PackageInfoLite(pi.packageName, pi.overlayTarget, pi.applicationInfo.uid,
-                    pi.isStaticOverlay, pi.overlayPriority, pi.applicationInfo.getBaseCodePath());
+        public List<PackageInfoLite> parsePackageInfo(@NonNull final PackageInfo pi) {
+            final int numberOfSplits = pi.splitNames != null ? pi.splitNames.length : 0;
+            List<PackageInfoLite> pkgs = new ArrayList<>(1 + numberOfSplits);
+
+            final PackageInfoLite base = new PackageInfoLite(pi.packageName, pi.overlayTarget,
+                    pi.applicationInfo.uid, pi.isStaticOverlay, pi.overlayPriority,
+                    pi.applicationInfo.getBaseCodePath());
+            pkgs.add(base);
+
+            for (int i = 0; i < numberOfSplits; i++) {
+                final String name = String.format("%s:%s", pi.packageName, pi.splitNames[i]);
+                final PackageInfoLite split = new PackageInfoLite(name,
+                        pi.splitOverlayTargetPackageNames[i], pi.applicationInfo.uid,
+                        false, 0, pi.splitCodePaths[i]);
+                pkgs.add(split);
+            }
+
+            return pkgs;
         }
 
         public PackageInfo getPackageInfo(@NonNull final String packageName, final int userId) {
@@ -870,8 +899,8 @@ public final class OverlayManagerService extends SystemService {
             // The package manager does not support different versions of packages
             // to be installed for different users: ignore userId for now.
             try {
-                return mPackageManager.checkSignatures(
-                        packageName1, packageName2) == SIGNATURE_MATCH;
+                return mPackageManager.checkSignatures(convertToBasePackageName(packageName1),
+                        convertToBasePackageName(packageName2)) == SIGNATURE_MATCH;
             } catch (RemoteException e) {
                 // Intentionally left blank
             }
@@ -880,14 +909,27 @@ public final class OverlayManagerService extends SystemService {
 
         @Override
         public List<PackageInfoLite> getOverlayPackages(final int userId) {
-            List<PackageInfo> pis = mPackageManagerInternal.getOverlayPackages(userId);
-            final int N = pis.size();
-            if (N == 0) {
+            ParceledListSlice<PackageInfo> parceledList = null;
+            try {
+                parceledList = mPackageManager.getInstalledPackages(0, userId);
+            } catch (RemoteException e) {
+                // Intentionally left blank
+            }
+            if (parceledList == null) {
                 return Collections.emptyList();
             }
-            List<PackageInfoLite> pils = new ArrayList<>(N);
+            List<PackageInfo> allPackages = parceledList.getList();
+            final int N = allPackages.size();
+            List<PackageInfoLite> pils = new ArrayList<>();
             for (int i = 0; i < N; i++) {
-                pils.add(parsePackageInfo(pis.get(i)));
+                List<PackageInfoLite> tmp = parsePackageInfo(allPackages.get(i));
+                for (int j = 0; j < tmp.size(); j++) {
+                    PackageInfoLite pil = tmp.get(j);
+                    if (isOverlayPackage(pil)) {
+                        pils.add(pil);
+                        cachePackageInfoLite(pil.packageName, userId, pil);
+                    }
+                }
             }
             return pils;
         }
@@ -923,6 +965,11 @@ public final class OverlayManagerService extends SystemService {
             return map == null ? null : map.get(packageName);
         }
 
+        private String convertToBasePackageName(final String name) {
+            final int index = name.indexOf(":");
+            return index < 0 ? name : name.substring(0, index);
+        }
+
         private static final String TAB1 = "    ";
         private static final String TAB2 = TAB1 + TAB1;
 
diff --git a/services/core/java/com/android/server/om/PackageInfoLite.java b/services/core/java/com/android/server/om/PackageInfoLite.java
index cde5e4f0ece..1ffa711b6c6 100644
--- a/services/core/java/com/android/server/om/PackageInfoLite.java
+++ b/services/core/java/com/android/server/om/PackageInfoLite.java
@@ -37,4 +37,8 @@ final class PackageInfoLite {
         this.overlayPriority = overlayPriority;
         this.codePath = codePath;
     }
+
+    public String toString() {
+        return String.format("PackageInfoLite {packageName=%s codePath=%s}", packageName, codePath);
+    }
 }
diff --git a/services/core/java/com/android/server/pm/PackageInstallerSession.java b/services/core/java/com/android/server/pm/PackageInstallerSession.java
index 3f1c8a13630..d7dcc33f311 100644
--- a/services/core/java/com/android/server/pm/PackageInstallerSession.java
+++ b/services/core/java/com/android/server/pm/PackageInstallerSession.java
@@ -1199,7 +1199,7 @@ public class PackageInstallerSession extends IPackageInstallerSession.Stub {
         // This is kind of hacky; we're creating a half-parsed package that is
         // straddled between the inherited and staged APKs.
         final PackageLite pkg = new PackageLite(null, baseApk, null, null, null, null,
-                splitPaths.toArray(new String[splitPaths.size()]), null);
+                splitPaths.toArray(new String[splitPaths.size()]), null, null);
         final boolean isForwardLocked =
                 (params.installFlags & PackageManager.INSTALL_FORWARD_LOCK) != 0;
 
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index 047af3a632e..f340a56a703 100644
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -25475,22 +25475,6 @@ Slog.v(TAG, ":: stepped forward, applying functor at tag " + parser.getName());
             }
         }
 
-        @Override
-        public List<PackageInfo> getOverlayPackages(int userId) {
-            final ArrayList<PackageInfo> overlayPackages = new ArrayList<PackageInfo>();
-            synchronized (mPackages) {
-                for (PackageParser.Package p : mPackages.values()) {
-                    if (p.mOverlayTarget != null) {
-                        PackageInfo pkg = generatePackageInfo((PackageSetting)p.mExtras, 0, userId);
-                        if (pkg != null) {
-                            overlayPackages.add(pkg);
-                        }
-                    }
-                }
-            }
-            return overlayPackages;
-        }
-
         @Override
         public List<String> getTargetPackageNames(int userId) {
             List<String> targetPackages = new ArrayList<>();
diff --git a/services/core/java/com/android/server/pm/PackageManagerShellCommand.java b/services/core/java/com/android/server/pm/PackageManagerShellCommand.java
index 909ffabfd2d..26060f667a4 100644
--- a/services/core/java/com/android/server/pm/PackageManagerShellCommand.java
+++ b/services/core/java/com/android/server/pm/PackageManagerShellCommand.java
@@ -177,7 +177,7 @@ class PackageManagerShellCommand extends ShellCommand {
                 try {
                     ApkLite baseApk = PackageParser.parseApkLite(file, 0);
                     PackageLite pkgLite = new PackageLite(null, baseApk, null, null, null, null,
-                            null, null);
+                            null, null, null);
                     params.sessionParams.setSize(PackageHelper.calculateInstalledSize(
                             pkgLite, false, params.sessionParams.abiOverride));
                 } catch (PackageParserException | IOException e) {
diff --git a/services/tests/servicestests/src/com/android/server/om/OverlayUtils.java b/services/tests/servicestests/src/com/android/server/om/OverlayUtils.java
index e9a2e99910a..96772915890 100644
--- a/services/tests/servicestests/src/com/android/server/om/OverlayUtils.java
+++ b/services/tests/servicestests/src/com/android/server/om/OverlayUtils.java
@@ -23,6 +23,12 @@ class OverlayUtils {
     private static final int DELAY_MS = 100;
     private static final int MAX_WAIT_TIME = 10 * 1000;
 
+    public static OverlayInfo getOverlayInfo(@NonNull final Context ctx,
+            @NonNull final String packageName, final int userId) throws Exception {
+        final IOverlayManager om = getOverlayManager(ctx);
+        return om.getOverlayInfo(packageName, userId);
+    }
+
     public static void enable(@NonNull final Context ctx, @NonNull final String packageName,
             final int userId) throws Exception {
         if (isEnabled(ctx, packageName, userId)) {
diff --git a/services/tests/servicestests/src/com/android/server/om/PackageUtils.java b/services/tests/servicestests/src/com/android/server/om/PackageUtils.java
index 85bdfb854f6..ada90831c11 100644
--- a/services/tests/servicestests/src/com/android/server/om/PackageUtils.java
+++ b/services/tests/servicestests/src/com/android/server/om/PackageUtils.java
@@ -28,7 +28,7 @@ import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 
 class PackageUtils {
-    public static void install(@NonNull final Context ctx, @NonNull final Uri uri)
+    public static void install(@NonNull final Context ctx, @NonNull final Uri... uris)
             throws Exception {
         final PackageInstaller installer = ctx.getPackageManager().getPackageInstaller();
         SessionParams params = new SessionParams(MODE_FULL_INSTALL);
@@ -36,14 +36,17 @@ class PackageUtils {
         final int sessionId = installer.createSession(params);
         final PackageInstaller.Session session = installer.openSession(sessionId);
 
-        try (
-            final InputStream is = ctx.getContentResolver().openInputStream(uri);
-            final OutputStream os = session.openWrite(PackageUtils.class.getSimpleName(), 0, -1);
-        ) {
-            int c;
-            byte[] buffer = new byte[1024];
-            while ((c = is.read(buffer)) != -1) {
-                os.write(buffer, 0, c);
+        for (int i = 0; i < uris.length; i++) {
+            final Uri uri = uris[i];
+            try (
+                final InputStream is = ctx.getContentResolver().openInputStream(uri);
+                final OutputStream os = session.openWrite(String.format("apk-%d", i), 0, -1);
+            ) {
+                int c;
+                byte[] buffer = new byte[1024];
+                while ((c = is.read(buffer)) != -1) {
+                    os.write(buffer, 0, c);
+                }
             }
         }
 
diff --git a/services/tests/servicestests/src/com/android/server/om/RuntimeResourceOverlayTests.java b/services/tests/servicestests/src/com/android/server/om/RuntimeResourceOverlayTests.java
index a334e879fa0..73dba5976a6 100644
--- a/services/tests/servicestests/src/com/android/server/om/RuntimeResourceOverlayTests.java
+++ b/services/tests/servicestests/src/com/android/server/om/RuntimeResourceOverlayTests.java
@@ -2,6 +2,8 @@ package com.android.server.om;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeTrue;
 
@@ -54,6 +56,9 @@ public class RuntimeResourceOverlayTests {
 
     private static final String SOME_OTHER_APP_URI = URI_PREFIX + "some_other_app";
     private static final String APP_OVERLAY_1_V2_URI = URI_PREFIX + "app_overlay_1_v2";
+    private static final String SPLIT_BASE = URI_PREFIX + "split_base";
+    private static final String SPLIT_STRING = URI_PREFIX + "split_string";
+    private static final String SPLIT_INTEGER = URI_PREFIX + "split_integer";
 
     private static HashMap<String, Integer> OVERLAY_PACKAGES = new HashMap<>();
 
@@ -504,6 +509,55 @@ public class RuntimeResourceOverlayTests {
         assertResource(0, R.integer.i); // resource should be unmodified
     }
 
+    @Test
+    public void testSplitOverlay() throws Exception {
+        assertNull(OverlayUtils.getOverlayInfo(mContext,
+                    "com.android.rrotests.split:string", mUserId));
+        assertNull(OverlayUtils.getOverlayInfo(mContext,
+                    "com.android.rrotests.split:integer", mUserId));
+        try {
+            PackageUtils.install(mContext,
+                    Uri.parse(SPLIT_BASE),
+                    Uri.parse(SPLIT_STRING),
+                    Uri.parse(SPLIT_INTEGER));
+            OverlayUtils.pollUntilOverlayAppears(mContext,
+                    "com.android.rrotests.split:string", mUserId);
+            OverlayUtils.pollUntilOverlayAppears(mContext,
+                    "com.android.rrotests.split:integer", mUserId);
+
+            assertNotNull(OverlayUtils.getOverlayInfo(mContext,
+                        "com.android.rrotests.split:string", mUserId));
+            assertNotNull(OverlayUtils.getOverlayInfo(mContext,
+                        "com.android.rrotests.split:integer", mUserId));
+
+            assertResource("a", R.string.s);
+            assertResource(0, R.integer.i);
+
+            OverlayUtils.enable(mContext, "com.android.rrotests.split:string", mUserId);
+            assertResource("split", R.string.s);
+            assertResource(0, R.integer.i);
+
+            OverlayUtils.enable(mContext, "com.android.rrotests.split:integer", mUserId);
+            assertResource("split", R.string.s);
+            assertResource(-1, R.integer.i);
+
+            OverlayUtils.disable(mContext, "com.android.rrotests.split:string", mUserId);
+            assertResource("a", R.string.s);
+            assertResource(-1, R.integer.i);
+
+            OverlayUtils.disable(mContext, "com.android.rrotests.split:integer", mUserId);
+            assertResource("a", R.string.s);
+            assertResource(0, R.integer.i);
+        } finally {
+            PackageUtils.uninstall(mContext, "com.android.rrotests.split");
+            SystemClock.sleep(1000);
+        }
+        assertNull(OverlayUtils.getOverlayInfo(mContext,
+                    "com.android.rrotests.split:string", mUserId));
+        assertNull(OverlayUtils.getOverlayInfo(mContext,
+                    "com.android.rrotests.split:integer", mUserId));
+    }
+
     private void assertResource(boolean expected, int resid) throws Exception {
         boolean actual = mResources.getBoolean(resid);
         assertEquals(expected, actual);
diff --git a/services/tests/servicestests/test-apks/split_integer/AndroidManifest.xml b/services/tests/servicestests/test-apks/split_integer/AndroidManifest.xml
new file mode 100644
index 00000000000..56a2162999c
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_integer/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.rrotests.split"
+    split="integer"
+    android:versionCode="1"
+    android:versionName="1.0" >
+    <overlay android:targetPackage="com.android.frameworks.servicestests"/>
+</manifest>
diff --git a/services/tests/servicestests/test-apks/split_integer/build b/services/tests/servicestests/test-apks/split_integer/build
new file mode 100644
index 00000000000..94d4c8ffb2f
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_integer/build
@@ -0,0 +1,24 @@
+# source this script to regenerate this package as a resource in the test app
+
+compile()
+{
+    aapt package \
+        -M AndroidManifest.xml \
+        -S res \
+        -I "${OUT}"/system/framework/framework-res.apk \
+        -F /tmp/apk \
+        -f
+}
+
+sign()
+{
+    local T=$(gettop)
+    java -Djava.library.path="$(get_abs_build_var SIGNAPK_JNI_LIBRARY_PATH)" \
+        -jar "${ANDROID_HOST_OUT}"/framework/signapk.jar \
+        "${T}"/build/target/product/security/platform.x509.pem \
+        "${T}"/build/target/product/security/platform.pk8 \
+        /tmp/apk \
+        ../../res/raw/split_integer
+}
+
+compile && sign && rm -f /tmp/apk
diff --git a/services/tests/servicestests/test-apks/split_integer/res/values/values.xml b/services/tests/servicestests/test-apks/split_integer/res/values/values.xml
new file mode 100644
index 00000000000..27a891592a6
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_integer/res/values/values.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <integer name="i">-1</integer>
+</resources>
diff --git a/services/tests/servicestests/test-apks/split_string/AndroidManifest.xml b/services/tests/servicestests/test-apks/split_string/AndroidManifest.xml
new file mode 100644
index 00000000000..f05a996ce79
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_string/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.rrotests.split"
+    split="string"
+    android:versionCode="1"
+    android:versionName="1.0" >
+    <overlay android:targetPackage="com.android.frameworks.servicestests"/>
+</manifest>
diff --git a/services/tests/servicestests/test-apks/split_string/build b/services/tests/servicestests/test-apks/split_string/build
new file mode 100644
index 00000000000..07cbbd5fb09
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_string/build
@@ -0,0 +1,24 @@
+# source this script to regenerate this package as a resource in the test app
+
+compile()
+{
+    aapt package \
+        -M AndroidManifest.xml \
+        -S res \
+        -I "${OUT}"/system/framework/framework-res.apk \
+        -F /tmp/apk \
+        -f
+}
+
+sign()
+{
+    local T=$(gettop)
+    java -Djava.library.path="$(get_abs_build_var SIGNAPK_JNI_LIBRARY_PATH)" \
+        -jar "${ANDROID_HOST_OUT}"/framework/signapk.jar \
+        "${T}"/build/target/product/security/platform.x509.pem \
+        "${T}"/build/target/product/security/platform.pk8 \
+        /tmp/apk \
+        ../../res/raw/split_string
+}
+
+compile && sign && rm -f /tmp/apk
diff --git a/services/tests/servicestests/test-apks/split_string/res/values/values.xml b/services/tests/servicestests/test-apks/split_string/res/values/values.xml
new file mode 100644
index 00000000000..b3bfe3c5e53
--- /dev/null
+++ b/services/tests/servicestests/test-apks/split_string/res/values/values.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="s">split</string>
+</resources>
diff --git a/services/tests/servicestests/test-apps/split_base/Android.mk b/services/tests/servicestests/test-apps/split_base/Android.mk
new file mode 100644
index 00000000000..66d5b744259
--- /dev/null
+++ b/services/tests/servicestests/test-apps/split_base/Android.mk
@@ -0,0 +1,15 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := tests
+LOCAL_SDK_VERSION := current
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+
+LOCAL_PACKAGE_NAME := SplitBase
+LOCAL_CERTIFICATE := platform
+LOCAL_DEX_PREOPT := false
+LOCAL_PROGUARD_ENABLED := disabled
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/services/tests/servicestests/test-apps/split_base/AndroidManifest.xml b/services/tests/servicestests/test-apps/split_base/AndroidManifest.xml
new file mode 100644
index 00000000000..e83538a157c
--- /dev/null
+++ b/services/tests/servicestests/test-apps/split_base/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.rrotests.split"
+    android:versionCode="1"
+    android:versionName="1.0" >
+    <application android:allowBackup="false" >
+    </application>
+</manifest>
diff --git a/services/tests/servicestests/test-apps/split_base/src/com/android/rrotests/split/Dummy.java b/services/tests/servicestests/test-apps/split_base/src/com/android/rrotests/split/Dummy.java
new file mode 100644
index 00000000000..2705a5f2fa3
--- /dev/null
+++ b/services/tests/servicestests/test-apps/split_base/src/com/android/rrotests/split/Dummy.java
@@ -0,0 +1,2 @@
+public class Dummy {
+}
diff --git a/tests/Overlays/base/Android.mk b/tests/Overlays/base/Android.mk
new file mode 100644
index 00000000000..32b643f6fc9
--- /dev/null
+++ b/tests/Overlays/base/Android.mk
@@ -0,0 +1,16 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+
+LOCAL_PACKAGE_NAME := OverlaysBase
+
+LOCAL_MODULE_TAGS := tests
+
+LOCAL_CERTIFICATE := platform
+
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/tests/Overlays/base/AndroidManifest.xml b/tests/Overlays/base/AndroidManifest.xml
new file mode 100644
index 00000000000..7d2c4fa1481
--- /dev/null
+++ b/tests/Overlays/base/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.android.test.overlay" >
+    <application
+        android:allowBackup="false"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme" >
+    </application>
+</manifest>
diff --git a/tests/Overlays/base/res/values/strings.xml b/tests/Overlays/base/res/values/strings.xml
new file mode 100644
index 00000000000..a01188070cd
--- /dev/null
+++ b/tests/Overlays/base/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">Overlay</string>
+</resources>
diff --git a/tests/Overlays/base/res/values/styles.xml b/tests/Overlays/base/res/values/styles.xml
new file mode 100644
index 00000000000..b60a4da7d38
--- /dev/null
+++ b/tests/Overlays/base/res/values/styles.xml
@@ -0,0 +1,4 @@
+<resources>
+    <style name="AppTheme" parent="android:Theme.Material.Light">
+    </style>
+</resources>
diff --git a/tests/Overlays/base/src/com/android/test/overlay/A.java b/tests/Overlays/base/src/com/android/test/overlay/A.java
new file mode 100644
index 00000000000..f7e8cc3b903
--- /dev/null
+++ b/tests/Overlays/base/src/com/android/test/overlay/A.java
@@ -0,0 +1,2 @@
+public class A {
+}
diff --git a/tests/Overlays/blue/Android.mk b/tests/Overlays/blue/Android.mk
index ece4bc65027..772b85e9d70 100644
--- a/tests/Overlays/blue/Android.mk
+++ b/tests/Overlays/blue/Android.mk
@@ -7,4 +7,8 @@ LOCAL_PACKAGE_NAME := OverlaysBlue
 
 LOCAL_MODULE_TAGS := tests
 
-include $(BUILD_RRO_PACKAGE)
+LOCAL_CERTIFICATE := platform
+
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/tests/Overlays/blue/AndroidManifest.xml b/tests/Overlays/blue/AndroidManifest.xml
index 119891d7fa7..b4a939314b5 100644
--- a/tests/Overlays/blue/AndroidManifest.xml
+++ b/tests/Overlays/blue/AndroidManifest.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.test.overlay.blue" >
+    package="com.android.test.overlay"
+    split="blue" >
     <overlay android:targetPackage="com.android.test.overlay.target"/>
 </manifest>
diff --git a/tests/Overlays/green/Android.mk b/tests/Overlays/green/Android.mk
index f1472f812a0..f25ac1da97c 100644
--- a/tests/Overlays/green/Android.mk
+++ b/tests/Overlays/green/Android.mk
@@ -7,4 +7,8 @@ LOCAL_PACKAGE_NAME := OverlaysGreen
 
 LOCAL_MODULE_TAGS := tests
 
-include $(BUILD_RRO_PACKAGE)
+LOCAL_CERTIFICATE := platform
+
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/tests/Overlays/green/AndroidManifest.xml b/tests/Overlays/green/AndroidManifest.xml
index 7c9493a412f..436522a0136 100644
--- a/tests/Overlays/green/AndroidManifest.xml
+++ b/tests/Overlays/green/AndroidManifest.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.test.overlay.green" >
+    package="com.android.test.overlay"
+    split="green" >
     <overlay android:targetPackage="com.android.test.overlay.target"/>
 </manifest>
diff --git a/tests/Overlays/red/Android.mk b/tests/Overlays/red/Android.mk
index d897f336c29..29956b47872 100644
--- a/tests/Overlays/red/Android.mk
+++ b/tests/Overlays/red/Android.mk
@@ -7,4 +7,8 @@ LOCAL_PACKAGE_NAME := OverlaysRed
 
 LOCAL_MODULE_TAGS := tests
 
-include $(BUILD_RRO_PACKAGE)
+LOCAL_CERTIFICATE := platform
+
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/tests/Overlays/red/AndroidManifest.xml b/tests/Overlays/red/AndroidManifest.xml
index 8c2c8ec62a1..bba827a85eb 100644
--- a/tests/Overlays/red/AndroidManifest.xml
+++ b/tests/Overlays/red/AndroidManifest.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.test.overlay.red" >
+    package="com.android.test.overlay"
+    split="red" >
     <overlay android:targetPackage="com.android.test.overlay.target"/>
 </manifest>
diff --git a/tests/Overlays/system/Android.mk b/tests/Overlays/system/Android.mk
index ab67287be1c..72335832307 100644
--- a/tests/Overlays/system/Android.mk
+++ b/tests/Overlays/system/Android.mk
@@ -9,4 +9,6 @@ LOCAL_MODULE_TAGS := tests
 
 LOCAL_CERTIFICATE := platform
 
-include $(BUILD_RRO_PACKAGE)
+LOCAL_USE_AAPT2 := true
+
+include $(BUILD_PACKAGE)
diff --git a/tests/Overlays/system/AndroidManifest.xml b/tests/Overlays/system/AndroidManifest.xml
index 2af11f5defc..1914b0d1981 100644
--- a/tests/Overlays/system/AndroidManifest.xml
+++ b/tests/Overlays/system/AndroidManifest.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.android.test.overlay.system" >
+    package="com.android.test.overlay"
+    split="system" >
     <overlay android:targetPackage="android"/>
 </manifest>
diff --git a/tests/Overlays/target/src/com/android/test/overlay/target/MainActivity.java b/tests/Overlays/target/src/com/android/test/overlay/target/MainActivity.java
index dd6ed5bcc45..327c71a3c43 100644
--- a/tests/Overlays/target/src/com/android/test/overlay/target/MainActivity.java
+++ b/tests/Overlays/target/src/com/android/test/overlay/target/MainActivity.java
@@ -36,13 +36,13 @@ public class MainActivity extends Activity {
     };
 
     private static final Overlay OVERLAY_RED =
-            new Overlay("com.android.test.overlay.red", USER_CURRENT);
+            new Overlay("com.android.test.overlay:red", USER_CURRENT);
     private static final Overlay OVERLAY_GREEN =
-            new Overlay("com.android.test.overlay.green", USER_CURRENT);
+            new Overlay("com.android.test.overlay:green", USER_CURRENT);
     private static final Overlay OVERLAY_BLUE =
-            new Overlay("com.android.test.overlay.blue", USER_CURRENT);
+            new Overlay("com.android.test.overlay:blue", USER_CURRENT);
     private static final Overlay OVERLAY_SYSTEM =
-            new Overlay("com.android.test.overlay.system", USER_SYSTEM);
+            new Overlay("com.android.test.overlay:system", USER_SYSTEM);
 
     private static final Overlay[] ALL_OVERLAY_PACKAGES = {
         OVERLAY_RED,
-- 
2.15.1

