From 39bf9ca07a6cc4d7f6ad70586192a769dedfe293 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Kongstad?= <marten.kongstad@sony.com>
Date: Tue, 23 Feb 2016 14:26:51 +0100
Subject: [PATCH 07/15] Ensure unique type IDs when parsing overlays

Always add a block to the idmap for each type in the overlay package
even if there are no matching resources for that type. This ensures that
ResTable::parsePackage will always get a unique ID for each type.

An alternative implementation would be to skip non-matching types when
parsing the overlay package, but that would prevent resolving references
to resources in XML.

Co-authored-by: Anton Risberg Alakula <anton.risbergalakula@sonymobile.com>
Bug: 31052947
Test: hand-craft an overlay package, check idmap file with 'idmap --inspect'
Change-Id: I059f2e8848dff685b5160fbd7ae20b8dfc64b1e5
---
 libs/androidfw/ResourceTypes.cpp                 | 42 ++++++++++++++++++++++--
 libs/androidfw/include/androidfw/ResourceTypes.h |  2 +-
 2 files changed, 41 insertions(+), 3 deletions(-)

diff --git a/libs/androidfw/ResourceTypes.cpp b/libs/androidfw/ResourceTypes.cpp
index a6307e45129..d09115f8609 100644
--- a/libs/androidfw/ResourceTypes.cpp
+++ b/libs/androidfw/ResourceTypes.cpp
@@ -6306,8 +6306,9 @@ status_t ResTable::parsePackage(const ResTable_package* const pkg,
 
     uint32_t id = dtohl(pkg->id);
     KeyedVector<uint8_t, IdmapEntries> idmapEntries;
+    const bool isOverlayPackage = header->resourceIDMap != NULL;
 
-    if (header->resourceIDMap != NULL) {
+    if (isOverlayPackage) {
         uint8_t targetPackageId = 0;
         status_t err = parseIdmap(header->resourceIDMap, header->resourceIDMapSize, &targetPackageId, &idmapEntries);
         if (err != NO_ERROR) {
@@ -6435,6 +6436,7 @@ status_t ResTable::parsePackage(const ResTable_package* const pkg,
                 bool addToType = true;
                 uint8_t typeIndex = typeSpec->id - 1;
                 ssize_t idmapIndex = idmapEntries.indexOfKey(typeSpec->id);
+                LOG_ALWAYS_FATAL_IF(isOverlayPackage && idmapIndex < 0);
                 if (idmapIndex >= 0) {
                     typeIndex = idmapEntries[idmapIndex].targetTypeId() - 1;
                 } else if (header->resourceIDMap != NULL) {
@@ -6513,6 +6515,7 @@ status_t ResTable::parsePackage(const ResTable_package* const pkg,
                 bool addToType = true;
                 uint8_t typeIndex = type->id - 1;
                 ssize_t idmapIndex = idmapEntries.indexOfKey(type->id);
+                LOG_ALWAYS_FATAL_IF(isOverlayPackage && idmapIndex < 0);
                 if (idmapIndex >= 0) {
                     typeIndex = idmapEntries[idmapIndex].targetTypeId() - 1;
                 } else if (header->resourceIDMap != NULL) {
@@ -6847,6 +6850,41 @@ status_t ResTable::createIdmap(const ResTable& overlay,
         return UNKNOWN_ERROR;
     }
 
+    // add an empty block for each type in the overlay package that doesn't
+    // have any matching entries; this ensures parsePackage gets a unique type
+    // ID for each type
+    for (size_t typeIndex = 0; typeIndex < overlay.mPackageGroups[0]->types.size(); ++typeIndex) {
+        const TypeList& typeList = overlay.mPackageGroups[0]->types[typeIndex];
+        if (typeList.isEmpty()) {
+            continue;
+        }
+        bool alreadyInIdmap = false;
+        for (size_t i = 0; i < map.size(); ++i) {
+            const IdmapTypeMap& type = map.valueAt(i);
+            if (type.overlayTypeId == static_cast<ssize_t>(typeIndex) + 1) {
+                alreadyInIdmap = true;
+                break;
+            }
+        }
+        if (!alreadyInIdmap) {
+            uint8_t unusedKey;
+            for (unusedKey = 0; unusedKey < 0xff; unusedKey++) {
+                if (map.indexOfKey(unusedKey) < 0) {
+                    IdmapTypeMap typeMap;
+                    typeMap.overlayTypeId = typeIndex + 1;
+                    typeMap.entryOffset = 0;
+                    map.add(unusedKey, typeMap);
+                    *outSize += 4 * sizeof(uint16_t);
+                    break;
+                }
+            }
+            if (unusedKey == 0xff) {
+                ALOGE("idmap: failed to find an unused key for type 0x%02zx", typeIndex);
+                return UNKNOWN_ERROR;
+            }
+        }
+    }
+
     if ((*outData = malloc(*outSize)) == NULL) {
         return NO_MEMORY;
     }
@@ -6862,7 +6900,7 @@ status_t ResTable::createIdmap(const ResTable& overlay,
         const char* path = paths[j];
         const size_t I = strlen(path);
         if (I > 255) {
-            ALOGV("path exceeds expected 255 characters: %s\n", path);
+            ALOGV("idmap: path exceeds expected 255 characters: %s\n", path);
             return UNKNOWN_ERROR;
         }
         for (size_t i = 0; i < 256; ++i) {
diff --git a/libs/androidfw/include/androidfw/ResourceTypes.h b/libs/androidfw/include/androidfw/ResourceTypes.h
index 66c66c251d9..df8538ec5a9 100644
--- a/libs/androidfw/include/androidfw/ResourceTypes.h
+++ b/libs/androidfw/include/androidfw/ResourceTypes.h
@@ -1933,7 +1933,7 @@ public:
             void** outData, size_t* outSize) const;
 
     static const size_t IDMAP_HEADER_SIZE_BYTES = 4 * sizeof(uint32_t) + 2 * 256;
-    static const uint32_t IDMAP_CURRENT_VERSION = 0x00000001;
+    static const uint32_t IDMAP_CURRENT_VERSION = 0x00000002;
 
     // Retrieve idmap meta-data.
     //
-- 
2.14.1

